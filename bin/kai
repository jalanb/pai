#! /usr/bin/env python3
"""kai

Show some lines from scripts
    with help from pai
"""

import os
import re
import sys

from pysyte import args as arguments
from pysyte import text_streams


def parse_args():
    """Parse out command line arguments"""
    parser = arguments.parser(__doc__)
    parser.strings('files', help='files to edit')
    parser.int('-a', '--at', default=None, help='Show line at the line number')
    parser.true('-c', '--clipboard', help='Get lines from clipboard')
    parser.arg('-f', '--first', default="1",
               help='number of or regexp / code in first line to show')
    parser.arg('-l', '--last', default="0",
               help='number of or regexp / code in last line to show')
    parser.true('-n', '--numbers', help='Show line numbers')
    parser.int('-w', '--width', help='Max width of shown line')
    return parser.parse_args()


def cut_lines(args, lines_read):

    def as_int(string, start):
        try:
            i = int(string)
            if i >= start:
                return i
        except (ValueError, TypeError):
            matcher = re.compile(string)
            for i, line in enumerate(lines_read, 1):
                if i <= start:
                    continue
                if matcher.search(line):
                    return i
        return 0

    def find_pattern(string, start):
        coder = pre.compile(string)
        match = coder.search(lines_read)
        if match:
            return match.i
        matcher = re.compile(string)
        for i, line in enumerate(lines_read[start:], 1 + start):
            if matcher.search(line):
                return i
        return 0

    def _line(string, start):
        i = as_int(string, start) or find_pattern(string, start)
        result = i if i >= 0 else length_read + 1 + i
        if result >= length_read:
            return length_read
        return 0 if result < 1 else result

    def _boundaries():
        if args.at:
            first = _line(args.at)
            return first, first + 1
        first = _line(args.first, 0) or -1
        last = _line(args.last, first) or -1
        return first, last

    length_read = len(lines_read)
    first, last = _boundaries()
    lines = [] if first > length_read else lines_read[first:last]
    return lines, first


def line_format(lines):
    last_line_number = len(lines)
    digits = len(str(last_line_number))
    return '%%%dd: ' % digits


def show_stream(stream, args):
    text = stream.read()
    lines_in = text.splitlines()
    lines, first = cut_lines(args, lines_in)
    line_format_ = line_format(lines)
    for i, line in enumerate(lines, first):
        prefix = ''
        if args.numbers:
            prefix = line_format_ % (i + 1)
        out = ' '.join((prefix, line.rstrip()))
        if args.width:
            out = out[:args.width]
        print(out)


def main():
    """Run the script"""
    args = parse_args()
    for stream in text_streams.any():
        show_stream(stream, args)
    return os.EX_OK


if __name__ == '__main__':
    arguments.call_main(main)
